//el metodo validate debe ser ejecutado automaticamente mediante un activador (o trigger) basado en tiempo. 
//el mismo se encarga de controlar que no hayan errores tanto en el nombre de los archivos adjuntos en los mails recibidos (siempre y cuando estos tengan formato csv),
//como tampoco en su contenido, chequeando los cabezales y la cantidad de campos de cada archivo csv adjunto.
function validate () {
  //destino al que se enviara el mail en caso de ser validado correctamente.
  var finalDestiny = "matiasdelaplaya@hotmail.com";
  //se obtienen los hilos que contienen mensajes con archivos adjuntos del tipo csv, y son anteriores a una semana.
  var threads = GmailApp.search('has:attachment filename:csv in:inbox newer_than:1d');
  //en este for se recorren dichos hilos.
   for (var t in threads){
     var label = "";
     //se obtienen todos los mensajes de cada hilo, se guarda en lastMsg el ultimo mensaje recibido y en from su emisor.
     var messages = threads[t].getMessages();
     var lastMsg = messages[messages.length - 1];
     var from = lastMsg.getFrom();
     //en caso de tenerla, se guarda en label la etiqueta del hilo.
     if (threads[t].getLabels()[0]){
       label = threads[t].getLabels()[0].getName();
     }
     //se chequea la etiqueta para ver que el archivo no haya sido ya procesado por el script.
     if(label !== "Procesado correctamente."){
       //se guardan los adjuntos del mensaje.
       var attachments = lastMsg.getAttachments();
       //si tiene adjuntos, se chequean su extensiones.
       if(attachments.length !== 0){
         var errorCount = 0;
         //se recorren los adjuntos y obtengo de cada uno su contenido, nombre y extension.
         for(var att in attachments){
           var errorType = 0;
           var validFileName = true;
           var validFileHeader = true;
           var validFileContent = true;
           var attachmentContent = attachments[att];
           var attachmentFullName = attachmentContent.getName();
           var attachmentNameArray = attachmentFullName.split(".");
           var attachmentName = attachmentNameArray[0];
           var attachmentExtension = attachmentNameArray[1];
           //si la extension en csv entonces se procesa el contenido del archivo. 
           if(attachmentExtension === "csv"){
             //en attachment se almacena el contenido del archivo csv adjunto en formato String.
             var attachment = Utilities.parseCsv(attachmentContent.getDataAsString(), ",").toString();
             //valida el nombre del archivo
             if(!validateFileName(attachmentName) ){
               validFileName = false;
             }
             //valida los cabezales del archivo
             if(!validateFileHeader(attachment)){
               validFileHeader = false;
             }
             //valida el contenido del archivo
             if(!validateFileContent(attachment)){
               validFileContent = false;
             }
             //de acuerdo al contenido de los booleanos, guarda en errorType un entero, cuyo valor se utilizara para enviar el mail correspondiente. 
             errorType = compareBooleans(validFileName, validFileHeader, validFileContent);
             //se envia un mail por cada adjunto, cuyo contenido y destino dependera de si estos presentan errores y cuales son. 
             if(errorType === 0){
               //se envia el archivo al mail destino final. (TODO: falta   mail en cuestion, mando mail avisando que se proceso exitosamente?).
               sendMail(attachmentContent, attachmentFullName, finalDestiny, errorType);
             }else{
               //se responde el mail al emisor original, indicando el error correspondiente.
//               for(var i = 0; i < 51; i++){
               from = "matias.gonzalo.lopez@gmail.com"  
               sendMail("", attachmentFullName, from, errorType);
//               }
               errorCount++;
             }
           }
         }
         //si una vez validados todos los adjuntos de un mail (concluido el segundo for), no se encontraron errores.
         if(errorCount === 0){
           //se agrega la etiqueta correspondiente al hilo cuyo email ha sido procesado de manera exitosa.
           addLabel(threads[t], "Procesado correctamente.");
           threads[t].refresh();
         }else{
           //si existen errores, el hilo es enviado a la papelera con la etiqueta correspondiente.
           threads[t].moveToTrash();
           addLabel(threads[t], "Procesado con errores.");
           threads[t].refresh(); 
         }
       }
     }
   }
}

//valida el nombre del archivo.
function validateFileName(fileName){
   //verifico que el nombre del archivo sea valido (del formato EXA_xxx o REU_xxx).
  if(fileName.indexOf("EXA_") < 0 && fileName.indexOf("REU_") < 0 ){
    return false;
  }
  return true;
}

//valida los cabezales del archivo, es decir las palabras de la primera fila (asignatura, cedula, nota, fallo).
//parametro: string, retorno: booleano.
function validateFileHeader(attachment){
  var delimiter = ',';
  var semiColondelimiter = ';';
  //en cada posicion del arreglo rawsArray se almacena el contenido de las filas del archivo csv.
  rawsArray = attachment.split(delimiter);
  //se guardan cada uno de los cabezales en headersArray para su posterior validacion.
  headersArray = rawsArray[0].split(semiColondelimiter);
  //se chequea si los nombres de los cabezales se encuentran bien escritos (sin importar mayusculas) 
  if(!headersArray[0].match(/asignatura/i) || !headersArray[1].match(/cedula/i) || !headersArray[2].match(/nota/i) || !headersArray[3].match(/fallo/i)){
    return false;
  }
  return true;
}

//valida que se encuentren 4 campos en cada fila (separados por comas o puntos y coma).   
//parametro: string, retorno: booleano.
function validateFileContent(attachment){
  var delimiter = ',';
  var semiColondelimiter = ';';
  //en cada posicion del arreglo rawsArray se almacena el contenido de las filas del archivo csv.
  rawsArray = attachment.split(delimiter);
  //recorre cada fila del arreglo
  for(var i = 1; i <= rawsArray.length - 1; i++){
    var semiColonCount = 0;
    var commaCount = 0;
    //recorre cada posicion de cada fila
    for(var j = 0; j < rawsArray[i].length; j++){
      if(rawsArray[i][j] === ";"){
        commaCount ++;
      }
      else if(rawsArray[i][j] === ","){
        semiColonCount ++;
      }
    }
    //si no hay 3 comas o puntos y coma, entonces hay mas o menos campos de los esperados. 
    if(commaCount !== 3 && semiColonCount !== 3 ){
      return false;
    }
  }
  return true;
}

//compara los valores de los booleanos para definir el mail que se enviara, y devuelve el entero correspondiente.
//parametros: booleanos, retorno: entero.
//cada entero respresenta un error, o una combinacion de estos, por ej: el numero 4 indica que se encontraron errores en los cabezales (H) y en el contenido (C).
//entero: NONE: 0, NAME (N): 1, HEADER (H): 2, CONTENT (C): 3, HC: 4, NH: 5, NC: 6, NHC: 7,
function compareBooleans(validFileName, validFileHeader, validFileContent){
  if(validFileName){
    if(validFileHeader){
      if(validFileContent){
        return 0;
      }else{
        return 3;
      }
    }else{
      if(validFileContent){
        return 2;
      }else{
        return 4;
      }
    }
  }else{
    if(validFileHeader){
      if(validFileContent){
        return 1;
      }else{
        return 6;
      }
    }else{
      if(validFileContent){
        return 5;
      }else{
        return 7;
      }
    }
  }
}


//si hay un error de validacion, responde el mail al emisor detallando el error correspondiente, si no lo hay es enviado al destino final.
//en caso de no poder enviar el mail, imprime en la consola la excepcion corresopndiente
//parametros: attachment: archivo adjunto (solo para el caso en que el archivo se haya validado exitosamente); attachmentName, reciever: string; errorType: entero.
function sendMail(attachment, attachmentName, reciever, errorType){
  try{
    switch(errorType) {
      case 0:
        GmailApp.sendEmail(reciever, "Archivo procesado correctamente.", "El archivo " + attachmentName + " ha sido validado con éxito.", {
                           attachments: [attachment],
                           name: "Automatic Validation Script"
                           });
        break;
      case 1:
        GmailApp.sendEmail(reciever, "ERROR al procesar archivo!", attachmentName + " no es un nombre de archivo válido.", {
                           name: "Automatic Validation Script"
                           });
        break;
      case 2:
        GmailApp.sendEmail(reciever, "ERROR al procesar archivo!", "El archivo " + attachmentName + " contiene cabezales que no son válidos.", {
                           name: "Automatic Validation Script"
                           });
        break;
      case 3:
        GmailApp.sendEmail(reciever, "ERROR al procesar archivo!", "El contenido (cantidad de campos por fila o carácter de separación) del archivo " + attachmentName + " no es válido.", {
                           name: "Automatic Validation Script"
                           });
        break;
      case 4:
        GmailApp.sendEmail(reciever, "ERROR al procesar archivo!", "El archivo " + attachmentName + " contiene contenido (cantidad de campos por fila o carácter de separación) y cabezales que no son válidos.", {
                           name: "Automatic Validation Script"
                           });
        break;
      case 5:
        GmailApp.sendEmail(reciever, "ERROR al procesar archivo!", "El nombre del archivo " + attachmentName + " y alguno de sus cabezales no son válidos.", {
                           name: "Automatic Validation Script"
                           });
        break;
      case 6:
        GmailApp.sendEmail(reciever, "ERROR al procesar archivo!", "Tanto el nombre del archivo " + attachmentName + " como su contenido (cantidad de campos por fila o carácter de separación) no son válidos.", {
                           name: "Automatic Validation Script"
                           });
        break;
      case 7:
        GmailApp.sendEmail(reciever, "ERROR al procesar archivo!", "El nombre del archivo " + attachmentName + ", su contenido (cantidad de campos por fila o carácter de separación) y alguno de sus cabezales no son válidos.", {
                           name: "Automatic Validation Script"
                           });
        break;
    }
  }
  catch(e){
    Logger.log(e);
  }
}

//agrega una etiqueta a los hilos que ya fueron procesados.
function addLabel(thread, userLabel){
  GmailApp.createLabel(userLabel);
  var label = GmailApp.getUserLabelByName(userLabel);
  thread.addLabel(label);
}

//elimina etiqueta "Procesado correctamente."
function removeLabel(){
  var label = GmailApp.getUserLabelByName("Procesado correctamente.");
  if(label){
    GmailApp.deleteLabel(label);
  } 
}

//esta cuenta es de uso exlusivo para envio de archivo de calificaciones (xxx.csv)
